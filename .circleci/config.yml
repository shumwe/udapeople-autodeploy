version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            when_destroy:
                type: string
                default: "on_fail"  
        steps:
            - run:
                name: Destroy environments
                when: on_fail
                command: |
                    aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
                    aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
                    aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}      
                    aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
    
    revert-migrations:
        description: Revert the last migration if successfully run in the current workflow.
        parameters:
            when_revert:
                type: boolean
                default: true
        steps:
            - run:
                name: Revert migrations
                when: on_fail
                command: |
                    SUCCESS=$(curl --insecure  https://kvdb.io/T1o59vrC9j1aCr8oMRDpZP/migration_$\{CIRCLE_WORKFLOW_ID:0:7\})
                    if(( $SUCCESS==1 ));
                    then
                        cd ~/project/backend
                        npm install
                        npm run migrations:revert
                    fi

jobs:
    hello:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run:
                name: "Hello"
                command: |
                    echo "Hello from Bravin"
    
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: Build front-end
                command: |
                  cd frontend 
                  npm install 
                  npm run build 
            - save_cache:
                paths: [frontend/node_modules]
                key: frontend-build
    
    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                name: Back-end build
                command: |
                    cd backend
                    npm install
                    npm run build
            - save_cache:
                paths: [backend/node_modules]
                key: backend-build

    test-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [frontend-test]
            - run:
                name: "Test Frontend"
                command: |
                    cd frontend
                    npm install
                    npm run test
    
    test-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [backend-test]
            - run:
                name: "Test Backend"
                command: |
                    cd backend
                    npm install
                    npm run test
    
    scan-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
           - checkout
           - restore_cache:
               keys: [frontend-build]
           - run:
               name: "Scan frontend for vulnerabilities"
               command: |
                   cd frontend
                   npm install
                   # npm install oauth-sign@^0.9.0
                   npm audit fix --audit-level=critical --force
                   npm audit --audit-level=critical
    
    scan-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
           - checkout
           - restore_cache:
               keys: [backend-build]
           - run:
               name: "Scan the backend for vulnerabilities"
               command: |
                   cd backend
                   npm install
                   # npm install oauth-sign@^0.9.0
                   npm audit fix --audit-level=critical --force
                   npm audit fix --force
                   npm audit --audit-level=critical
           - slack/notify:
               event: fail
               mentions: '@Devops'
               template: basic_fail_1
    
    deploy-infrastructure:
        docker:
            - image: amazon/aws-cli
        steps:
        - checkout
        - run:
            name: "Install dependancies"
            command: |
                yum install tar gzip -y
                yum update -y
        - run:
            name: Ensure back-end infrastructure exists
            command: |
                aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
        - run:
            name: Ensure front-end infrastructure exist
            command: |
                aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        - run:
            name: Add back-end ip to ansible inventory
            command: |
                cd .circleci/ansible
                aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text >> inventory.txt
        - persist_to_workspace:
            root: ~/
            paths:
                - project/.circleci/ansible/inventory.txt
        - destroy-environment
    
    configure-infrastructure:
        docker:
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            - add_ssh_keys:
                fingerprints: ["ac:59:30:21:5e:76:9f:1e:27:93:f4:cc:fb:4f:9b:86"]
            - attach_workspace:
                at: ~/
            - run:
                name: Install dependencies
                command: |
                    apk add tar gzip ansible nodejs
                    pip install --upgrade pip
                    pip install awscli
            - run:
                name: Configure server
                command: |
                    cd .circleci/ansible
                    ansible-playbook -i inventory.txt configure-server.yml
            - slack/notify:
               event: fail
               mentions: '@Devops'
               template: basic_fail_1
            - destroy-environment  
    
    run-migrations:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                name: install dependancies
                command: |
                    sudo apt-get update && sudo apt-get upgrade
                    sudo apt-get install curl -y
                    sudo apt-get install awscli -y
            - run:
                name: Run migrations
                command: |
                    cd backend
                    npm install
                    npm run migrations > migrations_dump.txt
            - run:
                name: Send migration results to kvdb
                command: |
                    if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                    then 
                        curl --insecure https://kvdb.io/T1o59vrC9j1aCr8oMRDpZP/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                    fi
            - destroy-environment 
            - revert-migrations
    
    deploy-frontend:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                name: Install dependencies
                command: |
                    yum install python3 -y
                    yum install tar curl -y
                    curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
                    yum install nodejs -y
                    pip install --user ansible
            - attach_workspace:
                at: ~/
            - run:
                name: Get backend url
                command: |
                    export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}")
                    export API_URL="http://${BACKEND_IP}:3030"
                    echo "API_URL = ${API_URL}"
                    echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
                    cat frontend/.env
            - run:
                name: Deploy frontend objects
                command: |
                    cd frontend
                    npm install
                    npm run build
                    tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                    aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            - destroy-environment
            - revert-migrations
            #TODO: provide this S3 bucket url
    
    deploy-backend:
        docker:
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            - add_ssh_keys:
                fingerprints: ["ac:59:30:21:5e:76:9f:1e:27:93:f4:cc:fb:4f:9b:86"]
            - attach_workspace:
                at: ~/
            - run:
                name: Install dependencies
                command: |
                    apk add tar gzip ansible nodejs
                    pip install awscli
            - run:
                name: Deploy backend
                command: |
                    # your code here
            - destroy-environment
            - revert-migrations

workflows:
  progress:
      jobs:
          - hello
          - build-frontend
          - build-backend
          - test-frontend:
              requires: [build-frontend]
          - test-backend:
              requires: [build-backend]
          - scan-frontend:
              requires: [build-frontend]
          - scan-backend:
              requires: [build-backend]
          - deploy-infrastructure:
              requires: [test-frontend,test-backend]
          - configure-infrastructure:
              requires: [deploy-infrastructure]
          - run-migrations:
              requires: [configure-infrastructure]
          - deploy-frontend:
              requires: [run-migrations]
